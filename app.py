from flask import Flask
from flask import render_template
from flask import request
from flask import redirect
from modules import *
import socket
import sys
import requests

def scan_ports(host, port1, port2):
    ports = set()
    openPorts = []
    closePorts = []
    for i in range(int(port1), int(port2)+1):
        ports.add(i)
    ports = sorted(ports)

    for port in ports:
        s = socket.socket()
        s.settimeout(1)  
        try:
            s.connect((host, port))
            s.close()
            openPorts.append(int(port))
        except:
            closePorts.append(int(port))
    portData = [openPorts,closePorts]
    return portData

def find_subdomain(domain):
    subdomainFound = []
    file = open("C:/Users/lenovo/Documents/Automatic-Pentest-Web/modules/wordlist.txt","r")
    content = file.read()
    subdomains = content.splitlines()

    for subdomain in subdomains:
        url1 = f"http://{subdomain}.{domain}"
        url2 = f"https://{subdomain}.{domain}"
        try:
            requests.get(url1, timeout=5)
            requests.get(url2, timeout=5)
            subdomainFound.append(url1)
            subdomainFound.append(url2)
        except:
            pass
    return subdomainFound

app = Flask(__name__, static_url_path='/static')

@app.route("/")
def index():
    return render_template('index.html')

@app.route("/network-scan")
def network_scan():
    return render_template('under-development.html')

@app.route("/ip-scan")
def ip_scan():
    return render_template('under-development.html')

@app.route('/port-scan', methods=['GET', 'POST'])
def port_scan():
    if request.method == 'GET':
        return render_template('port-scanner.html')
    else:
        target = request.form.get("target")
        port1 = request.form.get("port1")
        port2 = request.form.get("port2")
        portData = scan_ports(target,port1,port2)
        data = [str(target),int(port1),int(port2),portData]
        return render_template('port-scanner.html', data = data)

@app.route('/subdomain-find', methods=['GET', 'POST'])
def subdomain_find():
    if request.method == 'GET':
        return render_template('subdomain-finder.html')
    else:
        target = request.form.get("target")
        subdomainData = find_subdomain(target)
        data = [str(target),subdomainData]
        print(data)
        return render_template('subdomain-finder.html', data = data)

if __name__ == '__main__':
  app.run()